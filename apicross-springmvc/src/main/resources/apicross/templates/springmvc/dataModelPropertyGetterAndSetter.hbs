{{!-- ObjectDataModelProperty --}}
{{#if optional}}
    {{#unless writeOnly}}
        {{#if deprecated}}@Deprecated{{/if}}
        @JsonGetter("{{{name}}}")
        protected JsonNullable< {{#with type}}{{> type}}{{/with}} > {{resolvedName}}Json() {
        return this.{{resolvedName}};
        }
    {{/unless}}

    {{> documentation }}
    {{#if nullable}}@javax.annotation.Nullable{{/if}}
    @JsonIgnore
    {{#if deprecated}}@Deprecated{{/if}}
    public {{#with type}}{{> type}}{{/with}} get{{capitalizeFirst resolvedName}}() throws NoSuchElementException {
    return this.{{resolvedName}}.get();
    }

    {{> documentation }}
    {{#if nullable}}@javax.annotation.Nullable{{/if}}
    @JsonIgnore
    {{#if deprecated}}@Deprecated{{/if}}
    public {{#with type}}{{> type}}{{/with}} get{{capitalizeFirst resolvedName}}OrElse({{#with type}}{{> type}}{{/with}} defaultValue) {
    return this.{{resolvedName}}.isPresent()? this.{{resolvedName}}.get() : defaultValue;
    }

    @JsonIgnore
    {{#if deprecated}}@Deprecated{{/if}}
    public boolean is{{capitalizeFirst resolvedName}}Present() {
    return this.{{resolvedName}}.isPresent();
    }

    {{#if nullable}}
    @JsonIgnore
    {{#if deprecated}}@Deprecated{{/if}}
    public boolean is{{capitalizeFirst resolvedName}}PresentAndNotNull() {
    return this.{{resolvedName}}.isPresent() && this.{{resolvedName}}.get() != null;
    }
    {{/if}}

    public void if{{capitalizeFirst resolvedName}}Present(java.util.function.Consumer<{{#with type}}{{> type}}{{/with}}> consumer) {
    if(this.{{resolvedName}}.isPresent()) { consumer.accept(this.{{resolvedName}}.get()); }
    }

    {{#if nullable}}
    public void if{{capitalizeFirst resolvedName}}PresentAndNotNull(java.util.function.Consumer<{{#with type}}{{> type}}{{/with}}> consumer) {
    if(this.{{resolvedName}}.isPresent()) {
    {{#with type}}{{> type}}{{/with}} value = this.{{resolvedName}}.get();
    if(value != null) { consumer.accept(value); }
    }
    }
    {{/if}}
{{else}}
    {{> documentation }}
    {{#if deprecated}}@Deprecated{{/if}}
    {{#if writeOnly}}
        @JsonIgnore
    {{else}}
        @JsonGetter("{{{name}}}")
    {{/if}}
    public {{#with type}}{{> type}}{{/with}} get{{capitalizeFirst resolvedName}}() {
    return this.{{resolvedName}};
    }
{{/if}}

{{!-- Setters --}}
{{#if deprecated}}@Deprecated{{/if}}
{{#if readOnly}}
    @JsonIgnore
{{else}}
    @JsonSetter("{{{name}}}")
{{/if}}
public void set{{capitalizeFirst resolvedName}}({{#unless nullable}}@javax.annotation.Nonnull{{/unless}} {{#with type}}{{> type}}{{/with}} value) {
this.$specifiedProperties.add("{{name}}");
this.{{resolvedName}} = {{#if optional}}JsonNullable.of(value){{else}}value{{/if}};
}

{{#if deprecated}}@Deprecated{{/if}}
public {{../typeName}} with{{capitalizeFirst resolvedName}}({{#unless nullable}}@javax.annotation.Nonnull{{/unless}} {{#with type}}{{> type}}{{/with}} value) {
this.$specifiedProperties.add("{{name}}");
this.{{resolvedName}} = {{#if optional}}JsonNullable.of(value){{else}}value{{/if}};
return this;
}

{{#unless nullable}}
    {{#if deprecated}}@Deprecated{{/if}}
    public  {{../typeName}} with{{capitalizeFirst resolvedName}}IfNotNull({{#with type}}{{> type}}{{/with}} value) {
    if(value != null) {
    this.$specifiedProperties.add("{{name}}");
    this.{{resolvedName}} = {{#if optional}}JsonNullable.of(value){{else}}value{{/if}};
    }
    return this;
    }
{{/unless}}
